#!/usr/bin/env node
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _upload = require('./upload');

var _upload2 = _interopRequireDefault(_upload);

var _cliColor = require('cli-color');

var _cliColor2 = _interopRequireDefault(_cliColor);

var _invalidate = require('./invalidate');

var _invalidate2 = _interopRequireDefault(_invalidate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander2.default.version('0.0.1').option('-a, --access-key-id [accessKey]', 'AWS access key').option('-s, --secret-access-key [secretKey]', 'AWS secret access key').option('-b, --bucket [bucket]', 'Name of the bucket').option('-r, --region [region]', 'Region of the bucket [us-east-1]', 'us-east-1').option('-d, --distribution-id [distribution-id]', 'Cloudfront distrubution to invalidate index.html').parse(process.argv);

if (!_commander2.default.accessKeyId) {
  throw new Error('access-key-id is required');
}

if (!_commander2.default.secretAccessKey) {
  throw new Error('secret-access-key is required');
}

if (!_commander2.default.bucket) {
  throw new Error('bucket is required');
}

var safeDeploy = function _callee() {
  return _regenerator2.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;

          console.log('\n' + _cliColor2.default.blue.underline('React deploy S3') + '\n');
          _context.next = 4;
          return _regenerator2.default.awrap((0, _upload2.default)({
            accessKeyId: _commander2.default.accessKeyId,
            secretAccessKey: _commander2.default.secretAccessKey,
            bucket: _commander2.default.bucket,
            region: _commander2.default.region
          }));

        case 4:
          console.log(_cliColor2.default.bold('App deployed at "' + _commander2.default.bucket + '"'));

          if (!_commander2.default.distributionId) {
            _context.next = 9;
            break;
          }

          _context.next = 8;
          return _regenerator2.default.awrap((0, _invalidate2.default)({
            accessKeyId: _commander2.default.accessKeyId,
            secretAccessKey: _commander2.default.secretAccessKey,
            distributionId: _commander2.default.distributionId
          }));

        case 8:
          console.log(_cliColor2.default.bold('Invalidation created'));

        case 9:
          _context.next = 15;
          break;

        case 11:
          _context.prev = 11;
          _context.t0 = _context['catch'](0);

          console.log('Error deploying:', _context.t0, _context.t0.stack);
          process.exit(1);

        case 15:
        case 'end':
          return _context.stop();
      }
    }
  }, null, undefined, [[0, 11]]);
};

safeDeploy();