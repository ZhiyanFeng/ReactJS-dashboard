'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _cliSpinner = require('cli-spinner');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var invalidate = function invalidate(cloudfront, distributionId, file) {
  return new Promise(function (resolve, reject) {
    var timestamp = Math.floor(Date.now() / 1000).toString();
    var params = {
      DistributionId: distributionId,
      InvalidationBatch: {
        CallerReference: 'react-deploy-s3-' + timestamp,
        Paths: {
          Quantity: 1,
          Items: ['/index.html']
        }
      }
    };
    cloudfront.createInvalidation(params, function (error, data) {
      if (error) {
        reject(error);
      } else {
        resolve(data);
      }
    });
  });
};

exports.default = function _callee(_ref) {
  var accessKeyId = _ref.accessKeyId;
  var secretAccessKey = _ref.secretAccessKey;
  var distributionId = _ref.distributionId;
  var cloudfront, spinner;
  return _regenerator2.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _awsSdk2.default.config.update({ accessKeyId: accessKeyId, secretAccessKey: secretAccessKey });
          cloudfront = new _awsSdk2.default.CloudFront();
          spinner = new _cliSpinner.Spinner('%s Creating invalidation');

          spinner.setSpinnerString('⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏');
          spinner.start();

          _context.next = 7;
          return _regenerator2.default.awrap(invalidate(cloudfront, distributionId, 'index.html'));

        case 7:

          spinner.stop(true);

        case 8:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
};